// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rusk.proto

package rusk

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RuskMock struct{}

func (m *RuskMock) Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error) {
	res :=
		&EchoResponse{}
	return res, nil
}
func (m *RuskMock) ValidateStateTransition(ctx context.Context, req *ValidateStateTransitionRequest) (*ValidateStateTransitionResponse, error) {
	res :=
		&ValidateStateTransitionResponse{
			SuccessfulCalls: []int32{
				506,
				72,
				827,
				166,
				989,
				710,
				527,
				412,
			},
		}
	return res, nil
}
func (m *RuskMock) ExecuteStateTransition(ctx context.Context, req *ExecuteStateTransitionRequest) (*ExecuteStateTransitionResponse, error) {
	res :=
		&ExecuteStateTransitionResponse{
			Success: false,
			Committee: []*Provisioner{
				&Provisioner{
					Stakes: []*Stake{
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
					},
				},
				&Provisioner{
					Stakes: []*Stake{
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
					},
				},
				&Provisioner{
					Stakes: []*Stake{
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
					},
				},
				&Provisioner{
					Stakes: []*Stake{
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
					},
				},
				&Provisioner{
					Stakes: []*Stake{
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
					},
				},
				&Provisioner{
					Stakes: []*Stake{
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
					},
				},
				&Provisioner{
					Stakes: []*Stake{
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
					},
				},
				&Provisioner{
					Stakes: []*Stake{
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
						&Stake{},
					},
				},
			},
		}
	return res, nil
}
func (m *RuskMock) GenerateScore(ctx context.Context, req *GenerateScoreRequest) (*GenerateScoreResponse, error) {
	res :=
		&GenerateScoreResponse{}
	return res, nil
}
func (m *RuskMock) VerifyScore(ctx context.Context, req *VerifyScoreRequest) (*VerifyScoreResponse, error) {
	res :=
		&VerifyScoreResponse{
			Success: false,
		}
	return res, nil
}
func (m *RuskMock) GenerateSecretKey(ctx context.Context, req *GenerateSecretKeyRequest) (*GenerateSecretKeyResponse, error) {
	res :=
		&GenerateSecretKeyResponse{
			Sk: &SecretKey{
				A: &Scalar{},
				B: &Scalar{},
			},
			Vk: &ViewKey{
				A:  &Scalar{},
				BG: &CompressedPoint{},
			},
			Pk: &PublicKey{
				AG: &CompressedPoint{},
				BG: &CompressedPoint{},
			},
		}
	return res, nil
}
func (m *RuskMock) Keys(ctx context.Context, req *SecretKey) (*KeysResponse, error) {
	res :=
		&KeysResponse{
			Vk: &ViewKey{
				A:  &Scalar{},
				BG: &CompressedPoint{},
			},
			Pk: &PublicKey{
				AG: &CompressedPoint{},
				BG: &CompressedPoint{},
			},
		}
	return res, nil
}
func (m *RuskMock) FullScanOwnedNotes(ctx context.Context, req *ViewKey) (*OwnedNotesResponse, error) {
	res :=
		&OwnedNotesResponse{
			Notes: []*DecryptedNote{
				&DecryptedNote{
					NoteType:        0,
					Nonce:           &Nonce{},
					RG:              &CompressedPoint{},
					PkR:             &CompressedPoint{},
					ValueCommitment: &CompressedPoint{},
					BlindingFactor:  &JubJubScalar{},
					RawBlindingFactor: &DecryptedNote_TransparentBlindingFactor{
						TransparentBlindingFactor: &JubJubScalar{},
					},
					RawValue: &DecryptedNote_EncryptedValue{},
				},
				&DecryptedNote{
					NoteType:        1,
					Nonce:           &Nonce{},
					RG:              &CompressedPoint{},
					PkR:             &CompressedPoint{},
					ValueCommitment: &CompressedPoint{},
					BlindingFactor:  &JubJubScalar{},
					RawValue:        &DecryptedNote_TransparentValue{},
					RawBlindingFactor: &DecryptedNote_TransparentBlindingFactor{
						TransparentBlindingFactor: &JubJubScalar{},
					},
				},
				&DecryptedNote{
					NoteType:        1,
					Nonce:           &Nonce{},
					RG:              &CompressedPoint{},
					PkR:             &CompressedPoint{},
					ValueCommitment: &CompressedPoint{},
					BlindingFactor:  &JubJubScalar{},
					RawBlindingFactor: &DecryptedNote_TransparentBlindingFactor{
						TransparentBlindingFactor: &JubJubScalar{},
					},
					RawValue: &DecryptedNote_EncryptedValue{},
				},
				&DecryptedNote{
					NoteType:          1,
					Nonce:             &Nonce{},
					RG:                &CompressedPoint{},
					PkR:               &CompressedPoint{},
					ValueCommitment:   &CompressedPoint{},
					BlindingFactor:    &JubJubScalar{},
					RawBlindingFactor: &DecryptedNote_EncryptedBlindingFactor{},
					RawValue:          &DecryptedNote_EncryptedValue{},
				},
				&DecryptedNote{
					NoteType:          1,
					Nonce:             &Nonce{},
					RG:                &CompressedPoint{},
					PkR:               &CompressedPoint{},
					ValueCommitment:   &CompressedPoint{},
					BlindingFactor:    &JubJubScalar{},
					RawValue:          &DecryptedNote_EncryptedValue{},
					RawBlindingFactor: &DecryptedNote_EncryptedBlindingFactor{},
				},
				&DecryptedNote{
					NoteType:          0,
					Nonce:             &Nonce{},
					RG:                &CompressedPoint{},
					PkR:               &CompressedPoint{},
					ValueCommitment:   &CompressedPoint{},
					BlindingFactor:    &JubJubScalar{},
					RawValue:          &DecryptedNote_TransparentValue{},
					RawBlindingFactor: &DecryptedNote_EncryptedBlindingFactor{},
				},
				&DecryptedNote{
					NoteType:        1,
					Nonce:           &Nonce{},
					RG:              &CompressedPoint{},
					PkR:             &CompressedPoint{},
					ValueCommitment: &CompressedPoint{},
					BlindingFactor:  &JubJubScalar{},
					RawBlindingFactor: &DecryptedNote_TransparentBlindingFactor{
						TransparentBlindingFactor: &JubJubScalar{},
					},
					RawValue: &DecryptedNote_EncryptedValue{},
				},
				&DecryptedNote{
					NoteType:          0,
					Nonce:             &Nonce{},
					RG:                &CompressedPoint{},
					PkR:               &CompressedPoint{},
					ValueCommitment:   &CompressedPoint{},
					BlindingFactor:    &JubJubScalar{},
					RawBlindingFactor: &DecryptedNote_EncryptedBlindingFactor{},
					RawValue:          &DecryptedNote_EncryptedValue{},
				},
			},
		}
	return res, nil
}
func (m *RuskMock) NewTransaction(ctx context.Context, req *NewTransactionRequest) (*Transaction, error) {
	res :=
		&Transaction{
			Inputs: []*TransactionInput{
				&TransactionInput{
					Nullifier: &Nullifier{
						H: &Scalar{},
					},
					MerkleRoot: &Scalar{},
				},
				&TransactionInput{
					Nullifier: &Nullifier{
						H: &Scalar{},
					},
					MerkleRoot: &Scalar{},
				},
				&TransactionInput{
					Nullifier: &Nullifier{
						H: &Scalar{},
					},
					MerkleRoot: &Scalar{},
				},
				&TransactionInput{
					Nullifier: &Nullifier{
						H: &Scalar{},
					},
					MerkleRoot: &Scalar{},
				},
				&TransactionInput{
					Nullifier: &Nullifier{
						H: &Scalar{},
					},
					MerkleRoot: &Scalar{},
				},
				&TransactionInput{
					Nullifier: &Nullifier{
						H: &Scalar{},
					},
					MerkleRoot: &Scalar{},
				},
				&TransactionInput{
					Nullifier: &Nullifier{
						H: &Scalar{},
					},
					MerkleRoot: &Scalar{},
				},
				&TransactionInput{
					Nullifier: &Nullifier{
						H: &Scalar{},
					},
					MerkleRoot: &Scalar{},
				},
			},
			Outputs: []*TransactionOutput{
				&TransactionOutput{
					Note: &Note{
						NoteType:        1,
						Nonce:           &Nonce{},
						RG:              &CompressedPoint{},
						PkR:             &CompressedPoint{},
						ValueCommitment: &CompressedPoint{},
						BlindingFactor:  &Note_EncryptedBlindingFactor{},
						Value:           &Note_TransparentValue{},
					},
					Pk: &PublicKey{
						AG: &CompressedPoint{},
						BG: &CompressedPoint{},
					},
					BlindingFactor: &JubJubScalar{},
				},
				&TransactionOutput{
					Note: &Note{
						NoteType:        0,
						Nonce:           &Nonce{},
						RG:              &CompressedPoint{},
						PkR:             &CompressedPoint{},
						ValueCommitment: &CompressedPoint{},
						BlindingFactor:  &Note_EncryptedBlindingFactor{},
						Value:           &Note_TransparentValue{},
					},
					Pk: &PublicKey{
						AG: &CompressedPoint{},
						BG: &CompressedPoint{},
					},
					BlindingFactor: &JubJubScalar{},
				},
				&TransactionOutput{
					Note: &Note{
						NoteType:        1,
						Nonce:           &Nonce{},
						RG:              &CompressedPoint{},
						PkR:             &CompressedPoint{},
						ValueCommitment: &CompressedPoint{},
						BlindingFactor: &Note_TransparentBlindingFactor{
							TransparentBlindingFactor: &JubJubScalar{},
						},
						Value: &Note_TransparentValue{},
					},
					Pk: &PublicKey{
						AG: &CompressedPoint{},
						BG: &CompressedPoint{},
					},
					BlindingFactor: &JubJubScalar{},
				},
				&TransactionOutput{
					Note: &Note{
						NoteType:        0,
						Nonce:           &Nonce{},
						RG:              &CompressedPoint{},
						PkR:             &CompressedPoint{},
						ValueCommitment: &CompressedPoint{},
						BlindingFactor: &Note_TransparentBlindingFactor{
							TransparentBlindingFactor: &JubJubScalar{},
						},
						Value: &Note_TransparentValue{},
					},
					Pk: &PublicKey{
						AG: &CompressedPoint{},
						BG: &CompressedPoint{},
					},
					BlindingFactor: &JubJubScalar{},
				},
				&TransactionOutput{
					Note: &Note{
						NoteType:        0,
						Nonce:           &Nonce{},
						RG:              &CompressedPoint{},
						PkR:             &CompressedPoint{},
						ValueCommitment: &CompressedPoint{},
						BlindingFactor:  &Note_EncryptedBlindingFactor{},
						Value:           &Note_TransparentValue{},
					},
					Pk: &PublicKey{
						AG: &CompressedPoint{},
						BG: &CompressedPoint{},
					},
					BlindingFactor: &JubJubScalar{},
				},
				&TransactionOutput{
					Note: &Note{
						NoteType:        1,
						Nonce:           &Nonce{},
						RG:              &CompressedPoint{},
						PkR:             &CompressedPoint{},
						ValueCommitment: &CompressedPoint{},
						BlindingFactor:  &Note_EncryptedBlindingFactor{},
						Value:           &Note_EncryptedValue{},
					},
					Pk: &PublicKey{
						AG: &CompressedPoint{},
						BG: &CompressedPoint{},
					},
					BlindingFactor: &JubJubScalar{},
				},
				&TransactionOutput{
					Note: &Note{
						NoteType:        1,
						Nonce:           &Nonce{},
						RG:              &CompressedPoint{},
						PkR:             &CompressedPoint{},
						ValueCommitment: &CompressedPoint{},
						BlindingFactor: &Note_TransparentBlindingFactor{
							TransparentBlindingFactor: &JubJubScalar{},
						},
						Value: &Note_EncryptedValue{},
					},
					Pk: &PublicKey{
						AG: &CompressedPoint{},
						BG: &CompressedPoint{},
					},
					BlindingFactor: &JubJubScalar{},
				},
				&TransactionOutput{
					Note: &Note{
						NoteType:        1,
						Nonce:           &Nonce{},
						RG:              &CompressedPoint{},
						PkR:             &CompressedPoint{},
						ValueCommitment: &CompressedPoint{},
						BlindingFactor: &Note_TransparentBlindingFactor{
							TransparentBlindingFactor: &JubJubScalar{},
						},
						Value: &Note_EncryptedValue{},
					},
					Pk: &PublicKey{
						AG: &CompressedPoint{},
						BG: &CompressedPoint{},
					},
					BlindingFactor: &JubJubScalar{},
				},
			},
			Fee: &TransactionOutput{
				Note: &Note{
					NoteType:        1,
					Nonce:           &Nonce{},
					RG:              &CompressedPoint{},
					PkR:             &CompressedPoint{},
					ValueCommitment: &CompressedPoint{},
					BlindingFactor: &Note_TransparentBlindingFactor{
						TransparentBlindingFactor: &JubJubScalar{},
					},
					Value: &Note_EncryptedValue{},
				},
				Pk: &PublicKey{
					AG: &CompressedPoint{},
					BG: &CompressedPoint{},
				},
				BlindingFactor: &JubJubScalar{},
			},
		}
	return res, nil
}
func (m *RuskMock) GetBalance(ctx context.Context, req *GetBalanceRequest) (*GetBalanceResponse, error) {
	res :=
		&GetBalanceResponse{}
	return res, nil
}
func (m *RuskMock) VerifyTransaction(ctx context.Context, req *ContractCallTx) (*VerifyTransactionResponse, error) {
	res :=
		&VerifyTransactionResponse{
			Verified: false,
		}
	return res, nil
}
func (m *RuskMock) CalculateMempoolBalance(ctx context.Context, req *CalculateMempoolBalanceRequest) (*GetBalanceResponse, error) {
	res :=
		&GetBalanceResponse{}
	return res, nil
}
func (m *RuskMock) NewStake(ctx context.Context, req *StakeTransactionRequest) (*StakeTransaction, error) {
	res :=
		&StakeTransaction{
			Tx: &Transaction{
				Inputs: []*TransactionInput{
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
				},
				Outputs: []*TransactionOutput{
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							Value:           &Note_TransparentValue{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							Value:           &Note_EncryptedValue{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
				},
				Fee: &TransactionOutput{
					Note: &Note{
						NoteType:        1,
						Nonce:           &Nonce{},
						RG:              &CompressedPoint{},
						PkR:             &CompressedPoint{},
						ValueCommitment: &CompressedPoint{},
						BlindingFactor: &Note_TransparentBlindingFactor{
							TransparentBlindingFactor: &JubJubScalar{},
						},
						Value: &Note_TransparentValue{},
					},
					Pk: &PublicKey{
						AG: &CompressedPoint{},
						BG: &CompressedPoint{},
					},
					BlindingFactor: &JubJubScalar{},
				},
			},
		}
	return res, nil
}
func (m *RuskMock) VerifyStake(ctx context.Context, req *StakeTransaction) (*VerifyTransactionResponse, error) {
	res :=
		&VerifyTransactionResponse{
			Verified: false,
		}
	return res, nil
}
func (m *RuskMock) NewWithdrawStake(ctx context.Context, req *WithdrawStakeTransactionRequest) (*WithdrawStakeTransaction, error) {
	res :=
		&WithdrawStakeTransaction{
			Tx: &Transaction{
				Inputs: []*TransactionInput{
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
				},
				Outputs: []*TransactionOutput{
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
				},
				Fee: &TransactionOutput{
					Note: &Note{
						NoteType:        1,
						Nonce:           &Nonce{},
						RG:              &CompressedPoint{},
						PkR:             &CompressedPoint{},
						ValueCommitment: &CompressedPoint{},
						BlindingFactor:  &Note_EncryptedBlindingFactor{},
						Value:           &Note_TransparentValue{},
					},
					Pk: &PublicKey{
						AG: &CompressedPoint{},
						BG: &CompressedPoint{},
					},
					BlindingFactor: &JubJubScalar{},
				},
			},
		}
	return res, nil
}
func (m *RuskMock) NewBid(ctx context.Context, req *BidTransactionRequest) (*BidTransaction, error) {
	res :=
		&BidTransaction{
			Tx: &Transaction{
				Inputs: []*TransactionInput{
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
				},
				Outputs: []*TransactionOutput{
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							Value:           &Note_TransparentValue{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
				},
				Fee: &TransactionOutput{
					Note: &Note{
						NoteType:        0,
						Nonce:           &Nonce{},
						RG:              &CompressedPoint{},
						PkR:             &CompressedPoint{},
						ValueCommitment: &CompressedPoint{},
						BlindingFactor:  &Note_EncryptedBlindingFactor{},
						Value:           &Note_TransparentValue{},
					},
					Pk: &PublicKey{
						AG: &CompressedPoint{},
						BG: &CompressedPoint{},
					},
					BlindingFactor: &JubJubScalar{},
				},
			},
		}
	return res, nil
}
func (m *RuskMock) NewWithdrawBid(ctx context.Context, req *WithdrawBidTransactionRequest) (*WithdrawBidTransaction, error) {
	res :=
		&WithdrawBidTransaction{
			Tx: &Transaction{
				Inputs: []*TransactionInput{
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
				},
				Outputs: []*TransactionOutput{
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							Value:           &Note_TransparentValue{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
				},
				Fee: &TransactionOutput{
					Note: &Note{
						NoteType:        1,
						Nonce:           &Nonce{},
						RG:              &CompressedPoint{},
						PkR:             &CompressedPoint{},
						ValueCommitment: &CompressedPoint{},
						BlindingFactor: &Note_TransparentBlindingFactor{
							TransparentBlindingFactor: &JubJubScalar{},
						},
						Value: &Note_TransparentValue{},
					},
					Pk: &PublicKey{
						AG: &CompressedPoint{},
						BG: &CompressedPoint{},
					},
					BlindingFactor: &JubJubScalar{},
				},
			},
		}
	return res, nil
}
func (m *RuskMock) NewWithdrawFees(ctx context.Context, req *WithdrawFeesTransactionRequest) (*WithdrawFeesTransaction, error) {
	res :=
		&WithdrawFeesTransaction{
			Tx: &Transaction{
				Inputs: []*TransactionInput{
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
				},
				Outputs: []*TransactionOutput{
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
				},
				Fee: &TransactionOutput{
					Note: &Note{
						NoteType:        0,
						Nonce:           &Nonce{},
						RG:              &CompressedPoint{},
						PkR:             &CompressedPoint{},
						ValueCommitment: &CompressedPoint{},
						Value:           &Note_TransparentValue{},
						BlindingFactor:  &Note_EncryptedBlindingFactor{},
					},
					Pk: &PublicKey{
						AG: &CompressedPoint{},
						BG: &CompressedPoint{},
					},
					BlindingFactor: &JubJubScalar{},
				},
			},
		}
	return res, nil
}
func (m *RuskMock) NewSlash(ctx context.Context, req *SlashTransactionRequest) (*SlashTransaction, error) {
	res :=
		&SlashTransaction{
			Step: 359,
			Tx: &Transaction{
				Inputs: []*TransactionInput{
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
					&TransactionInput{
						Nullifier: &Nullifier{
							H: &Scalar{},
						},
						MerkleRoot: &Scalar{},
					},
				},
				Outputs: []*TransactionOutput{
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        1,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor: &Note_TransparentBlindingFactor{
								TransparentBlindingFactor: &JubJubScalar{},
							},
							Value: &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_TransparentValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
					&TransactionOutput{
						Note: &Note{
							NoteType:        0,
							Nonce:           &Nonce{},
							RG:              &CompressedPoint{},
							PkR:             &CompressedPoint{},
							ValueCommitment: &CompressedPoint{},
							BlindingFactor:  &Note_EncryptedBlindingFactor{},
							Value:           &Note_EncryptedValue{},
						},
						Pk: &PublicKey{
							AG: &CompressedPoint{},
							BG: &CompressedPoint{},
						},
						BlindingFactor: &JubJubScalar{},
					},
				},
				Fee: &TransactionOutput{
					Note: &Note{
						NoteType:        1,
						Nonce:           &Nonce{},
						RG:              &CompressedPoint{},
						PkR:             &CompressedPoint{},
						ValueCommitment: &CompressedPoint{},
						BlindingFactor: &Note_TransparentBlindingFactor{
							TransparentBlindingFactor: &JubJubScalar{},
						},
						Value: &Note_TransparentValue{},
					},
					Pk: &PublicKey{
						AG: &CompressedPoint{},
						BG: &CompressedPoint{},
					},
					BlindingFactor: &JubJubScalar{},
				},
			},
		}
	return res, nil
}

type CryptoMock struct{}

func (m *CryptoMock) Hash(ctx context.Context, req *HashRequest) (*HashResponse, error) {
	res :=
		&HashResponse{
			Hash: &Scalar{},
		}
	return res, nil
}
