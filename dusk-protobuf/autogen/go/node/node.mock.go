// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AuthMock struct{}

func (m *AuthMock) CreateSession(ctx context.Context, req *SessionRequest) (*Session, error) {
	res :=
		&Session{
			AccessToken: "facilis",
		}
	return res, nil
}
func (m *AuthMock) DropSession(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "quae",
		}
	return res, nil
}

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "quos",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: false,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction:  0,
					Timestamp:  122,
					Type:       7,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  289,
					Type:       6,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  114,
					Type:       6,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  899,
					Type:       7,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  164,
					Type:       2,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  88,
					Type:       2,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  992,
					Type:       4,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  685,
					Type:       2,
					Obfuscated: true,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *GetUnconfirmedBalanceRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 4,
					Id:   "4110603b-2827-4952-a98e-a7d9e949110e",
				},
				&Tx{
					Type: 2,
					Id:   "305d93c1-7c62-4bca-a66c-ea5207615736",
				},
				&Tx{
					Type: 0,
					Id:   "e4dae47f-c402-43a2-8180-0d0f34ebe746",
				},
				&Tx{
					Type: 1,
					Id:   "32defdb6-d823-4392-b7e9-18cabb25efca",
				},
				&Tx{
					Type: 5,
					Id:   "d1a855b5-cbbe-48fc-aaef-258c9e51b60d",
				},
				&Tx{
					Type: 2,
					Id:   "c6d814f7-53ce-4225-8dbc-97770fae1c74",
				},
				&Tx{
					Type: 7,
					Id:   "83a9c380-19f2-40e4-b8b4-3d73f54fceec",
				},
				&Tx{
					Type: 0,
					Id:   "82827136-e4a7-4363-8bf8-5cc5d9df396c",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "ad",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 95.4181,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type ProvisionerMock struct{}

func (m *ProvisionerMock) AutomateStakes(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "perferendis",
		}
	return res, nil
}

type BlockGeneratorMock struct{}

func (m *BlockGeneratorMock) AutomateBids(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "quas",
		}
	return res, nil
}
