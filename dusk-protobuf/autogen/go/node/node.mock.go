// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AuthMock struct{}

func (m *AuthMock) CreateSession(ctx context.Context, req *SessionRequest) (*Session, error) {
	res :=
		&Session{
			AccessToken: "qui",
		}
	return res, nil
}
func (m *AuthMock) DropSession(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "eveniet",
		}
	return res, nil
}

type WalletMock struct{}

func (m *WalletMock) CreateWallet(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) LoadWallet(ctx context.Context, req *LoadRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) CreateFromSeed(ctx context.Context, req *CreateRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) ClearWalletDatabase(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "quia",
		}
	return res, nil
}
func (m *WalletMock) GetWalletStatus(ctx context.Context, req *EmptyRequest) (*WalletStatusResponse, error) {
	res :=
		&WalletStatusResponse{
			Loaded: true,
		}
	return res, nil
}
func (m *WalletMock) GetAddress(ctx context.Context, req *EmptyRequest) (*LoadResponse, error) {
	res :=
		&LoadResponse{
			Key: &PubKey{},
		}
	return res, nil
}
func (m *WalletMock) GetBalance(ctx context.Context, req *EmptyRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *WalletMock) GetTxHistory(ctx context.Context, req *EmptyRequest) (*TxHistoryResponse, error) {
	res :=
		&TxHistoryResponse{
			Records: []*TxRecord{
				&TxRecord{
					Direction:  1,
					Timestamp:  265,
					Type:       6,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  512,
					Type:       0,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  560,
					Type:       4,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  977,
					Type:       2,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  1,
					Timestamp:  135,
					Type:       1,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  622,
					Type:       0,
					Obfuscated: true,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  376,
					Type:       2,
					Obfuscated: false,
				},
				&TxRecord{
					Direction:  0,
					Timestamp:  518,
					Type:       4,
					Obfuscated: false,
				},
			},
		}
	return res, nil
}

type MempoolMock struct{}

func (m *MempoolMock) GetUnconfirmedBalance(ctx context.Context, req *GetUnconfirmedBalanceRequest) (*BalanceResponse, error) {
	res :=
		&BalanceResponse{}
	return res, nil
}
func (m *MempoolMock) SelectTx(ctx context.Context, req *SelectRequest) (*SelectResponse, error) {
	res :=
		&SelectResponse{
			Result: []*Tx{
				&Tx{
					Type: 1,
					Id:   "e6d031f1-466e-461f-aea6-f83eb9755fcd",
				},
				&Tx{
					Type: 5,
					Id:   "38cc848a-361b-423d-8a05-1f35aa1488e7",
				},
				&Tx{
					Type: 4,
					Id:   "df42e5fd-cdd8-4a99-9d94-ee75210e6859",
				},
				&Tx{
					Type: 0,
					Id:   "1e8903bc-dd2a-49a8-bb83-ff65c5d97a2f",
				},
				&Tx{
					Type: 1,
					Id:   "4f13d10b-8b95-475f-962f-22ff62a68cbb",
				},
				&Tx{
					Type: 2,
					Id:   "e82a7a74-31cd-469a-91e6-944fbdd0c0b0",
				},
				&Tx{
					Type: 1,
					Id:   "bf51657f-225e-4830-ad8c-0b46513b88f8",
				},
				&Tx{
					Type: 4,
					Id:   "8cdfb276-2b41-4948-8b6d-caefdfc99f99",
				},
			},
		}
	return res, nil
}

type ChainMock struct{}

func (m *ChainMock) RebuildChain(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "officia",
		}
	return res, nil
}
func (m *ChainMock) GetSyncProgress(ctx context.Context, req *EmptyRequest) (*SyncProgressResponse, error) {
	res :=
		&SyncProgressResponse{
			Progress: 13.5251,
		}
	return res, nil
}

type TransactorMock struct{}

func (m *TransactorMock) CallContract(ctx context.Context, req *CallContractRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Transfer(ctx context.Context, req *TransferRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Bid(ctx context.Context, req *BidRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}
func (m *TransactorMock) Stake(ctx context.Context, req *StakeRequest) (*TransactionResponse, error) {
	res :=
		&TransactionResponse{}
	return res, nil
}

type ProvisionerMock struct{}

func (m *ProvisionerMock) AutomateStakes(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "earum",
		}
	return res, nil
}

type BlockGeneratorMock struct{}

func (m *BlockGeneratorMock) AutomateBids(ctx context.Context, req *EmptyRequest) (*GenericResponse, error) {
	res :=
		&GenericResponse{
			Response: "quo",
		}
	return res, nil
}
