
PROJECT_NAME := "dusk-protobuf"
PKG := "github.com/dusk-network/$(PROJECT_NAME)"
PKG_LIST := $(shell go list ${PKG}/... | grep -v /vendor/)
#TEST_FLAGS := "-count=1"
GO_FILES := $(shell find . -name '*.go' | grep -v /vendor/ | grep -v _test.go)
.PHONY: all go clean gen regen-dir help

go: gen-monitor gen-rusk gen-node ## Generate the RPC golang structs
	@echo "generated packages"

all: regen-dir mock go ## Recreates the autogen folder and calls regen

mock: mock-monitor mock-rusk mock-node ## Generate the mockups
	@echo "generated mocks"
clean: ## Remove previously autogenerated files
	@echo "removing $(PWD)/autogen folder"
	@rm -rf ./autogen
regen-dir: clean
	@echo "creating $(PWD)/autogen/go/{monitor,rusk,node} folders"
	@mkdir -p ./autogen/go/{monitor,rusk,node}
help: ## Display this help screen
	@grep -h -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
mock-monitor:
	@protoc -I./monitor --gogo_out=plugins=grpc,paths=source_relative:./autogen/go/monitor --gogrpcmock_out=paths=source_relative:./autogen/go/monitor ./monitor/*.proto
mock-rusk:
	@protoc -I./rusk --gogo_out=plugins=grpc,paths=source_relative:./autogen/go/rusk --gogrpcmock_out=paths=source_relative:./autogen/go/rusk ./rusk/*.proto
mock-node:
	@protoc -I./node --gogo_out=plugins=grpc,paths=source_relative:./autogen/go/node --gogrpcmock_out=paths=source_relative:./autogen/go/node ./node/*.proto
gen-monitor: 
	@protoc -I./monitor/ ./monitor/*.proto --go_out=plugins=grpc,paths=source_relative:./autogen/go/monitor
gen-rusk:
	@protoc -I./rusk/ ./rusk/*.proto --go_out=plugins=grpc,paths=source_relative:./autogen/go/rusk
gen-node:
	@protoc -I./node/ ./node/*.proto --go_out=plugins=grpc,paths=source_relative:./autogen/go/node
