syntax = "proto3";
package rusk;
option go_package = "github.com/dusk-protobuf/autogen/go/rusk";

import "field.proto";
import "keys.proto";
import "note.proto";
import "transaction.proto";
import "consensus.proto";

message EchoRequest {}
message EchoResponse {}

message BidList {
  repeated bytes bid_list = 1;
}

message Stake {
  fixed64 amount = 1;
  fixed64 start_height = 2;
  fixed64 end_height = 3;
}

message Provisioner {
  bytes bls_key = 1;
  repeated Stake stakes = 2;
}

// List of transactions to be validated
message ValidateStateTransitionRequest {
  repeated ContractCallTx calls = 1;
  fixed64 current_height = 2;
}

message ContractCallTx {
  oneof contract_call {
    rusk.Transaction tx = 1;
    rusk.WithdrawFeesTransaction withdraw = 2;
    rusk.StakeTransaction stake = 3;
    rusk.BidTransaction bid = 4;
    rusk.SlashTransaction slash = 5;
    rusk.DistributeTransaction distribute = 6;
    rusk.WithdrawStakeTransaction withdraw_stake = 7;
    rusk.WithdrawBidTransaction withdraw_bid = 8;
  }
}

// Used to request the Slash of a stake
message SlashTransactionRequest {
  bytes bls_key = 1;
  uint32 step = 2;
  fixed64 round = 3;
  bytes first_msg = 4;
  bytes first_sig = 5;
  bytes second_msg = 6;
  bytes second_sig = 7;
  rusk.NewTransactionRequest tx = 8;
}

// Used to request the withdrawal of fees from a Provisioner
message WithdrawFeesTransactionRequest {
  bytes bls_key = 1;
  bytes sig = 2;
  bytes msg = 3;
  rusk.NewTransactionRequest tx = 4;
}

// Used to request the withdrawal of a Stake
message WithdrawStakeTransactionRequest {
  bytes bls_key = 1;
  bytes sig = 2;
  rusk.NewTransactionRequest tx = 3;
}

// Used to request the withdrawal of a Bid
message WithdrawBidTransactionRequest {
  bytes sig = 1;
  bytes ed_pk = 2;
  rusk.NewTransactionRequest tx = 3;
}

// Used to request the creation of a Stake
message StakeTransactionRequest {
  bytes bls_key = 1;
  fixed64 expiration_height = 2;
  rusk.NewTransactionRequest tx = 3;
}

// Used to Request the creation of a Bid
message BidTransactionRequest {
  bytes K = 1;
  bytes ed_pk = 2;
  bytes seed = 3;
  fixed64 expiration_height = 4;
  rusk.NewTransactionRequest tx = 5;
}

message ValidateStateTransitionResponse {
  repeated int32 successful_calls = 1;
}

message ExecuteStateTransitionRequest {
  fixed64 height = 1;
  repeated ContractCallTx calls = 2;
}

message ExecuteStateTransitionResponse {
  bool success = 1;
  repeated Provisioner committee = 2;
}

message GenerateSecretKeyRequest { bytes b = 1; }

message GenerateSecretKeyResponse {
  SecretKey sk = 1;
  ViewKey vk = 2;
  PublicKey pk = 3;
}

// Used for scanning unspent input set
message OwnedNotesResponse { repeated DecryptedNote notes = 1; }

// Call from CLI directly
message NewTransactionRequest {
  SecretKey sk = 1;
  PublicKey recipient = 2;
  fixed64 value = 3;
  fixed64 fee = 4;
  bool obfuscated = 5;
  bytes data = 6;
}

message VerifyTransactionResponse {
  bool verified = 1;
}

message KeysResponse {
  ViewKey vk = 1;
  PublicKey pk = 2;
}

message GenerateScoreRequest {
  bytes d = 1;
  bytes k = 2;
  bytes seed = 3;
  bytes ed_pk = 4;
  fixed64 round = 5;
  uint32 step = 6;
}

message GenerateScoreResponse {
  bytes proof = 1;
  bytes score = 2;
  bytes seed = 3;
  bytes identity = 4;
}

message VerifyScoreRequest {
  bytes proof = 1;
  bytes score = 2;
  bytes seed = 3;
  bytes identity = 4;
  fixed64 round = 5;
  uint32 step = 6;
}

message VerifyScoreResponse {
  bool success = 1;
}

service Rusk {
  // Simple echo request
  rpc Echo(EchoRequest) returns (EchoResponse) {}

  // Validate a set of contract calls, returning false if at least one of the
  // listed transactions is inconsistent
  rpc ValidateStateTransition(ValidateStateTransitionRequest)
      returns (ValidateStateTransitionResponse) {}

  // Execute a set of contract calls, resulting in a mutation of the contract
  // storage.
  rpc ExecuteStateTransition(ExecuteStateTransitionRequest)
      returns (ExecuteStateTransitionResponse) {}

  // Generate a proof of blind bid, and a score.
  rpc GenerateScore(GenerateScoreRequest)
      returns (GenerateScoreResponse) {}

  // Verify a proof of blind bid, and the associated score
  rpc VerifyScore(VerifyScoreRequest)
      returns (VerifyScoreResponse) {}

  // Phoenix stuff
  rpc GenerateSecretKey(GenerateSecretKeyRequest) returns (GenerateSecretKeyResponse) {}
  rpc Keys(SecretKey) returns (KeysResponse) {}
  rpc FullScanOwnedNotes(ViewKey) returns (OwnedNotesResponse) {}
  rpc NewTransaction(NewTransactionRequest) returns (Transaction) {}
  rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse) {}
  rpc VerifyTransaction(ContractCallTx) returns (VerifyTransactionResponse) {}
  rpc CalculateMempoolBalance(CalculateMempoolBalanceRequest) returns (GetBalanceResponse) {}

  // Stake
  rpc NewStake(StakeTransactionRequest) returns (StakeTransaction) {}
  rpc VerifyStake(StakeTransaction) returns (VerifyTransactionResponse) {}
  rpc NewWithdrawStake(WithdrawStakeTransactionRequest) returns (WithdrawStakeTransaction) {}

  // Bid
  rpc NewBid(BidTransactionRequest) returns (BidTransaction) {}
  rpc NewWithdrawBid(WithdrawBidTransactionRequest) returns (WithdrawBidTransaction) {}
  
  // WithdrawFee 
  rpc NewWithdrawFees(WithdrawFeesTransactionRequest) returns (WithdrawFeesTransaction) {}

  // Slash 
  rpc NewSlash(SlashTransactionRequest) returns (SlashTransaction) {}
}

message GetBalanceRequest {
  ViewKey vk = 1;
}  

message GetBalanceResponse {
  fixed64 balance = 1;
}

message CalculateMempoolBalanceRequest {
  ViewKey vk = 1;
  repeated ContractCallTx txs = 2;
}

message BinaryHashRequest {
  repeated bytes inputs = 1;
}

message TransactionHashRequest {
  repeated rusk.Transaction txs = 1;
}

// HashRequest carries the input for the hashing which can be an array of arrays of bytes or a transaction.
message HashRequest {
  oneof request {
    BinaryHashRequest bin_inputs = 1;
    TransactionHashRequest tx_inputs = 2;
  }
}

// HashResponse carries the scalar calculated by the hashing function
message HashResponse {
  Scalar hash = 1;
}

// Crypto is a collection of services not immediately related to rusk but that happen to be 
// served by the rusk process
// TODO: find a better way to reuse structures defined in field.proto which need to be used
// also outside of rusk
service Crypto {
  // Hash performs a Poseidon hashing and returns a scalar
  rpc Hash(HashRequest) returns (HashResponse) {}
}
